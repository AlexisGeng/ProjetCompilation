/*
 * analyseur syntaxique  d'un langage fictif:
 *
 * auteurs : Laurene Cladt, Alexis Geng, Benjamin Rath, Enzo Proux
 * (c) 2017
 */ 

package fr.ul.miage.compilation.generated;
import fr.ul.*;
import fr.ul.miage.structure.arbre.*;
import fr.ul.miage.tablesymboles.*;
import fr.ul.miage.generateur.*;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;


parser code {:
	public Arbre getArbre(){
		return action_obj.arbre;
	}
	
	public TableSymboles getTDS(){
		return action_obj.tds;
	}
:}

action code{:
public Noeud prog= new Noeud(Noeud.PRINCIPAL_NOD,null);
public Arbre arbre = new Arbre(prog);
public TableSymboles tds = new TableSymboles();
public ArrayList<Noeud> tableauFct = new ArrayList();
public int nbParam = 0;
public int nbLoc = 0;
public int nbFonction = 0;
public String nomFonction;
public ArrayList<Fonction> fonctionDeclare = new ArrayList();
public ArrayList<Fonction> fonctionAppele = new ArrayList();


:}

/* la grammaire */

terminal PV, LECTURE,ECRIRE, EQQ, VIRGULE, FLECHE, PO, PF, DP, INF, SUP, INFEGAL, SUPEGAL, DEF, ENDDEF, MAIN, RETURN, WHILE, ENDWHILE, IF, ENDIF, ELSE ;
terminal String NOM, TYPE;
terminal Integer NBR,ADD,SUB,MUL,DIV;
/*
 * PV = ;
 * VIRGULEGULEGULE = ,
 * FLECHE = <-
 * PO = (
 * PF = )
 * DP = :
 * NOM = le nom de la variable/fonction
 * NBR = 1,2,... nombre
 * INF = <
 * SUP = >
 * EQQ = =
 * INFEGAL = <=
 * SUPEGAL = >=
 * TYPE = nom du type 
*/



non terminal  decVar  ;
non terminal Noeud  operateur2,declarationLoc, expression, condition, return, programme;
non terminal Integer operation1, expr_c, operation2,ope_bool, parametres ;
non terminal ArrayList<Noeud> bloc, declaration_Loc, autreVarLoc, decFonc, liste_argument,suite_argument;
non terminal Noeud  boucle, varExpr, appelFonctionInt, appelFonction,expression_bool, varExpr_bool;
non terminal String autreVar;



//Precedences added by Eclipse plugin
precedence nonassoc RETURN;	// Inserted by Eclipse plugin
precedence nonassoc DEF;	// Inserted by Eclipse plugin

/*------DEBUT PROGRAMME-------*/

start with programme;



programme ::= decVar programme:f{:prog.addFils(f);
							System.out.println("");
							//tds.visualisation();
						   :}
	| decFonc:f {:tds.insererVarTemporaire();
							prog.getFils().addAll(f); 
							//Fonction.verificationsFonction(fonction_appele,fonction_declare);
							//arbre.affichage();:} 
	; 

/*------VARIABLES GLOBALES------*/


decVar ::= TYPE NOM:nom autreVar:autre FLECHE expr_c:i PV {:tds.insertionVerifValeur(nom, Integer.toString(i), "int", "globale", nbLoc, nbParam);
															 :}
                    | TYPE NOM:nom autreVar:autre FLECHE NBR:nb PV {:tds.insertionVerifValeur(nom, Integer.toString(nb), "int", "globale", nbLoc, nbParam);
                    									:}
                    | TYPE NOM:nom autreVar:autre PV {:tds.insertionVerifValeur(nom, null, "int", "globale", nbLoc, nbParam);
                    									:}
                    ;

autreVar ::= VIRGULE NOM:nom autreVar {:tds.insertionVerifValeur(nom, null, "int", "globale", nbLoc, nbParam);
									RESULT = nom;:}
			|
			;

expr_c ::= FLECHE NBR:nb {:RESULT = nb;:}
		| 
		; 

/*------VARIABLES LOCALES------*/

declarationLoc ::= declaration_Loc:var declarationLoc expr_c:i PV {:tds.ajouterValeurListeTemporaire(var, i);
						Noeud n = new Noeud(Noeud.AFFECT);
						n.getFils().addAll(var);
						RESULT = n;:}
						|   {:nbFonction++;
							tds.setListeParametre(nbParam);
							tds.setListeLoc(nbLoc);
							nbParam = 0;
							nbLoc = 0;
							  :}
						;

declaration_Loc ::= TYPE NOM:nom autreVarLoc:apres PV {:tds.stockTemporaire(nom, "int", "loc", "var", nbLoc, nbParam, nbFonction);
												nbLoc ++;
												apres.add(new Noeud(Noeud.NOM,nom));
												RESULT=apres;	
												:}
												
				;

autreVarLoc ::= VIRGULE NOM:nom autreVarLoc:l {:
											tds.stockTemporaire(nom, "int", "loc", "var", nbLoc, nbParam, nbFonction);
											if(nom != null){
												l.addAll(l);
											}
											l.add(new Noeud(Noeud.NOM, nom));
											RESULT=l;
											:}
				| {: RESULT = new ArrayList<Noeud>();:}
				;

/*------Declaration des Opérations------*/

expression ::= expression:n1 operation1:i operateur2:n2 {: Noeud n = new Noeud(i);
														
														n.addFils(n1);
														n.addFils(n2);
														RESULT = n;:}
				| operateur2:n {:RESULT = n;:}
				
				;
             
operateur2 ::= operateur2:n1 operation2:i varExpr:n2{: Noeud n = new Noeud(i);
													n.addFils(n1);
													n.addFils(n2);
													RESULT = n;:}
				| varExpr:n{:RESULT = n;:}
				| SUB:i varExpr:n{:Noeud t = new Noeud(i); t.addFils(n); RESULT =t; :}
				
				;

varExpr ::=  PO expression:e PF{:RESULT = e;:}
			| NBR:n{:RESULT = new Noeud(Noeud.CONST,n);:}
			| NOM:nom{:RESULT = new Noeud(Noeud.IDF,nom);:}
			| appelFonctionInt:n{:RESULT = n;:}
			| LECTURE PO PF{:RESULT = new Noeud(Noeud.LEC);:}
			;

operation1 ::= ADD{: RESULT = Noeud.ADD;:}
		| SUB{:RESULT = Noeud.SUB;:}
		;

operation2 ::= MUL{:RESULT = Noeud.MUL;:}
		| DIV{:RESULT = Noeud.DIV;:}
		;
	

/*------Appel FONCTIONS------*/

appelFonction ::= NOM:s PO liste_argument:l PF {:fonctionAppele.add(new Fonction(s,"void",l.size())); Noeud n = new Noeud(Noeud.APPEL,tds.clefExiste(s));
												n.getFils().addAll(l);
												RESULT = n;
												:}
				| ECRIRE PO expression:e PF {:Noeud n = new Noeud(Noeud.ECRIRE);
											n.addFils(e);
											RESULT = n;
											:}
				| ECRIRE PO PF {:RESULT = new Noeud(Noeud.ECRIRE);:}
				;
				
appelFonctionInt ::= NOM:s PO liste_argument:l PF {:fonctionAppele.add(new Fonction(s,"int",l.size())); Noeud n = new Noeud(Noeud.APPEL,s);
												n.getFils().addAll(l);
												RESULT = n;
												:}
				| ECRIRE PO expression:e PF {:Noeud n = new Noeud(Noeud.ECRIRE);
											n.addFils(e);
											RESULT = n;
											:}
				| ECRIRE PO PF {:RESULT = new Noeud(Noeud.ECRIRE);:}
				;
			

liste_argument ::= expression:x suite_argument:l{:l.add(0,x);RESULT = l;:}
					 | {: RESULT = new ArrayList<Noeud>();:}
					 ;
				 

suite_argument ::= VIRGULE expression:x suite_argument:l{:l.add(0,x);RESULT=l;:}
				| {: RESULT = new ArrayList<Noeud>();:}
				;

/*------PARAMETRES------*/

parametres ::= TYPE NOM:nom parametres {:nbParam ++;
									tds.stockTemporaire(nom, "int", "loc", "param", nbLoc, nbParam, nbFonction);
									RESULT = nbParam;
									:}
			| VIRGULE TYPE NOM:nom parametres {:nbParam ++;
										tds.stockTemporaire(nom, "int", "loc", "param", nbLoc, nbParam, nbFonction);
										RESULT = nbParam;:}
			| {:RESULT = 0 ; :}
			;

/*------FONCTIONS------*/

decFonc ::= DEF TYPE:t MAIN:nom PO parametres:l PF DP declarationLoc:m bloc:i ENDDEF PV  decFonc {:fonctionDeclare.add(new Fonction("main",t,l));nomFonction = "main" ; tds.insertionVerifValeur("main", null, t, "glob", "fonction", nbLoc, l);
																															   
																															 Noeud n = new Noeud(Noeud.FCT, nom);
																															 n.getFils().add(m);
																															 n.getFils().addAll(i);
																															 tableauFct.add(n);
																															 nomFonction = "";
																															 RESULT = tableauFct;
																															 
																															 
																															 :}
						 | DEF TYPE:t NOM:nom PO parametres:l PF DP declarationLoc:m bloc:i ENDDEF PV decFonc {:fonctionDeclare.add(new Fonction(nom,t,l));tds.insertionVerifValeur(nom, null,t, "glob", "fonction", nbLoc, l);
						 																			Noeud n = new Noeud(Noeud.FCT, nom);
						 																			n.getFils().add(m);
																									n.getFils().addAll(i);
																									tableauFct.add(n);
																									RESULT = tableauFct;:}
						 |
						 ;

bloc ::=  NOM:nom FLECHE expression:e PV bloc:i {:Noeud n = new Noeud(Noeud.EQ);
																n.addFils(new Noeud(Noeud.NOM,nom));
																n.addFils(e);
																i.add(0,n);
																RESULT = i;
																:}
																
					| appelFonction:af PV bloc:i {:i.add(0,af);RESULT=i;:}
					| condition:c bloc:i {:i.add(0,c);RESULT=i;:}
					| return:r bloc:i {:i.add(0,r); RESULT = i;:}
					| boucle:b bloc:i {:i.add(0,b);RESULT=i;:}
					| {: RESULT = new ArrayList<Noeud>();:}
					;


/*------CONDITIONNELLES------*/

condition ::= 	IF PO expression_bool:e PF DP bloc:i ENDIF {:Noeud n = new Noeud(Noeud.IF);

																	n.addFils(e);
																	Noeud then = new Noeud(Noeud.THEN);
																	n.addFils(then);
																	then.getFils().addAll(i);
																	RESULT = n;
																	:}


				| IF PO expression_bool:e PF DP bloc:it ELSE DP bloc:ie ENDIF {: Noeud n = new Noeud(Noeud.IF);
																										n.addFils(e);
																										Noeud then = new Noeud(Noeud.THEN);
																										n.addFils(then);
																										then.getFils().addAll(it);
																										Noeud els = new Noeud(Noeud.ELSE);
																										n.addFils(els);
																										els.getFils().addAll(ie);
																										RESULT = n;
																										:}
				;

expression_bool ::= expression_bool:t ope_bool:s varExpr_bool:a {: Noeud n = new Noeud(s);
																n.addFils(t);
																n.addFils(a);
																RESULT = n;  :}
					| varExpr_bool:a {: Noeud n = new Noeud(Noeud.BOOL);
									n.addFils(a);
									RESULT = n;  
									:}
					;

varExpr_bool ::= NBR:n {:RESULT = new Noeud(Noeud.CONST,n);:}
				| NOM:nom{:RESULT = new Noeud(Noeud.IDF,nom);:}
				| PO expression_bool PF 
				| NOM PO expression_bool PF
				;
				

ope_bool ::= SUP {:RESULT = Noeud.SUP;:}
			| INF  {:RESULT = Noeud.INF;:}
			| EQQ  {:RESULT = Noeud.EQQ;:}
			| SUPEGAL {:RESULT = Noeud.SUPEGAL;:}
			| INFEGAL {:RESULT = Noeud.INFEGAL;:}
			;

/*------BOUCLES------*/

boucle ::= WHILE PO expression_bool:e PF DP bloc:i ENDWHILE {:Noeud n = new Noeud(Noeud.WH);
																n.addFils (e);
																Noeud corps = new Noeud(Noeud.CORPSWH);
																n.addFils (corps);
																corps.getFils().addAll(i);
																RESULT=n;
																:} 
		;

/*------RETURN------*/

return ::= RETURN expression:e PV {:Noeud n = new Noeud(Noeud.RETURN);
								n.addFils (e);
								RESULT = n;
								:} 
		;

